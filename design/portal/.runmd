# Introducing `.runmd`
- `runmd` is a set of rules on top of markdown, that can be used to describe runtimes. 
- The idea behind this is to be able to describe a runtime, in the same way you would structure a story. 
- Here is a typical example of `runmd`
``` md 
``` example timer
add duration        .int    5
add duration_ms     .float3 0.0, 0.0, 1000.0
add default_open    .enable
```
- In markdown this element would be referred to as a code block, in runmd, this is known as a block entity.

## Quicklook: Entity Component Systems 
- An entity component system is a technique for organizing composite groups of things. (for lack of a better term)
- The advantages of an ECS is your ability to easliy plugin new functionality over existing data, and very compact runtime overhead.
- To make a long-story short, the result is continguous data that can be looped over very quickly, which is what improves cpu-cache performance.
- The main ECS chiron uses is `specs`, you can read more about the subject and this library here - https://specs.amethyst.rs/docs/tutorials/

# Block entity in action
- A block entity starts off w/ a block address, which is a name/symbol pair with a one-to-many relationship
- Each line of the block describes an event that is dispatched to the entity that is created when the block is loaded. 
- There are really only two events that are important, which are `add` and `define`.
- The difference between the two, is to differentiate between stable and transient data. 
- `add` creates stable data for the entity, while `define` describes transient data that requires interpretation.
- Below is the same example as the beginning, with a button that will dispatch this block to chiron. Once you click the button, a new block should show up in the desktop tool.
``` runmd
``` demo timer
add duration            .int    5
add duration_ms         .float3 0.0, 0.0, 1000.0
add default_open        .enable
add always_show         .enable
add enable_connection   .enable
add node_title          .text Demo timer
```

# Getting started with runmd
- Defining `default call` will allow chiron to bootstrap an entire runtime. 
- To use this feature drop a directory containing a `.runmd` file into chiron. Which, if you're reading this, is how you got the portal up and running. 
``` runmd
``` default call
define portal lab  .symbol portal
```

# Hierarchy of elements 
- At the bottom level there are the framing elements `value` and `attribute`. These are basically literal data types w/ labels. 
- A line of `runmd` is an `event`, a sequence of events is an `engine`, and a group of engines is a `runtime`. 
- In the context of this portal, our `runtime` is represented by the symbol `lab`, and our engines are represented by the symbol `call`
- Below, is the actual definition of the runtime hosting this page
``` md
``` portal lab
define setup         call .symbol host
define host          call
add node_title      .text Host lab portal
add description     .text Builds and hosts the chiron portal
add project_src     .text design/portal/.runmd
```
- The call symbols being defined above represent blocks that exist in this project. 

# Engine Layout
- Even though events are processed in order, their values are stored in alpha-numeric order.
- However in an engine, the sequence of events matters,
- The solution is a prefix added in front of the name of the event to force it's position in the sequence.
``` md
``` setup call
define a_setup            clear   .text   empty
define b_setup          process   .symbol compile_elm
```

- Transient data is data that is in transit. Facilitating these transitions are `plugins`.
- Plugins are installed w/ the runtime before the block is processed. Plugins are retrieved by symbol.
- If a plugin is missing, the line in the engine sequence is skipped.
``` md
``` host call
define a_host           install  .symbol portal
define b_host           app_host .symbol portal
```
- Blocks are always processed and plugins are in charge of managing it's own transitions. 
- By consolidating the layout of engines the runtime uses, dependent transitions are grouped together in such a way that they form a black box.
- This is helpful for organizing complex systems, and also making reusable copy/paste friendly code. 

## The portal setup engine
``` md
``` compile_elm process
add command                 .text   elm make src/Main.elm --output portal.js
add current_dir             .text   lib/elm/portal
```

``` md
``` portal install 
add work_dir                      .text   design/portal
add file_src                      .text   lib/elm/portal/portal.js
```

- To check if elm is installed, the expect plugin can be used to check the path
``` md
``` compile_elm expect
define elm which            .text elm
```

## Host Engine
- Last, a server to host the lab portal starts. `lab.rs` implements the `app_host` in this case, so most of the routes and api's are defined in that file.
``` md
``` portal app_host
add node_title                   .text  Host lab app_host
add address                      .text  localhost:3000
```
